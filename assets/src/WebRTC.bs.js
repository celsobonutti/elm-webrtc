// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");

var $$RTCIceCandidate = {};

var $$RTCPeerConnectionIceEvent = {};

var RTCIceConnectionStateChangeEvent = {};

var RTCErrorEvent = {};

function getData(t) {
  var data = t.data;
  var isArrayBuffer = (a => a instanceof ArrayBuffer);
  if (typeof data === "string") {
    return {
            TAG: /* String */0,
            _0: data
          };
  } else if (isArrayBuffer(data)) {
    return {
            TAG: /* ArrayBuffer */1,
            _0: data
          };
  } else {
    return ;
  }
}

var RTCMessageEvent = {
  getData: getData
};

var UnknownBinaryType = Caml_exceptions.create("WebRTC.RTCDataChannel.UnknownBinaryType");

function encodeBinaryType(param) {
  switch (param) {
    case /* Blob */0 :
        return "blob";
    case /* ArrayBuffer */1 :
        return "arraybuffer";
    case /* Unknown */2 :
        return "";
    
  }
}

function decodeBinaryType(param) {
  switch (param) {
    case "arraybuffer" :
        return /* ArrayBuffer */1;
    case "blob" :
        return /* Blob */0;
    default:
      return /* Unknown */2;
  }
}

function setBinaryType(t, binaryType) {
  t.binaryType = encodeBinaryType(binaryType);
  
}

function getBinaryType(t) {
  return decodeBinaryType(t.binaryType);
}

var $$RTCDataChannel = {
  UnknownBinaryType: UnknownBinaryType,
  encodeBinaryType: encodeBinaryType,
  decodeBinaryType: decodeBinaryType,
  setBinaryType: setBinaryType,
  getBinaryType: getBinaryType
};

var $$RTCDataChannelEvent = {};

var RTCOffer = {};

function encode(param) {
  switch (param) {
    case /* Offer */0 :
        return "offer";
    case /* Pranswer */1 :
        return "pranswer";
    case /* Answer */2 :
        return "answer";
    case /* Rollback */3 :
        return "rollback";
    case /* Unknown */4 :
        return "";
    
  }
}

function decode(param) {
  switch (param) {
    case "answer" :
        return /* Answer */2;
    case "offer" :
        return /* Offer */0;
    case "pranswer" :
        return /* Pranswer */1;
    case "rollback" :
        return /* Rollback */3;
    default:
      return /* Unknown */4;
  }
}

var RTCSdpType = {
  encode: encode,
  decode: decode
};

function encode$1(param) {
  switch (param) {
    case /* New */0 :
        return "new";
    case /* Checking */1 :
        return "checking";
    case /* Connected */2 :
        return "connected";
    case /* Completed */3 :
        return "completed";
    case /* Disconnected */4 :
        return "disconnected";
    case /* Failed */5 :
        return "failed";
    case /* Closed */6 :
        return "closed";
    case /* Unknown */7 :
        return "";
    
  }
}

function decode$1(param) {
  switch (param) {
    case "checking" :
        return /* Checking */1;
    case "closed" :
        return /* Closed */6;
    case "completed" :
        return /* Completed */3;
    case "connected" :
        return /* Connected */2;
    case "disconnected" :
        return /* Disconnected */4;
    case "failed" :
        return /* Failed */5;
    case "new" :
        return /* New */0;
    default:
      return /* Unknown */7;
  }
}

var RTCIceConnectionState = {
  encode: encode$1,
  decode: decode$1
};

function getType(t) {
  return decode(t.type);
}

var $$RTCSessionDescription = {
  getType: getType
};

var RTCIceServer = {};

var RTCConfiguration = {};

function iceConnectionState(t) {
  return decode$1(t.iceConnectionState);
}

var $$RTCPeerConnection = {
  iceConnectionState: iceConnectionState
};

exports.$$RTCIceCandidate = $$RTCIceCandidate;
exports.$$RTCPeerConnectionIceEvent = $$RTCPeerConnectionIceEvent;
exports.RTCIceConnectionStateChangeEvent = RTCIceConnectionStateChangeEvent;
exports.RTCErrorEvent = RTCErrorEvent;
exports.RTCMessageEvent = RTCMessageEvent;
exports.$$RTCDataChannel = $$RTCDataChannel;
exports.$$RTCDataChannelEvent = $$RTCDataChannelEvent;
exports.RTCOffer = RTCOffer;
exports.RTCSdpType = RTCSdpType;
exports.RTCIceConnectionState = RTCIceConnectionState;
exports.$$RTCSessionDescription = $$RTCSessionDescription;
exports.RTCIceServer = RTCIceServer;
exports.RTCConfiguration = RTCConfiguration;
exports.$$RTCPeerConnection = $$RTCPeerConnection;
/* No side effect */
